<?php

require_once __DIR__.'/../../modelo/configuracion.php';
require_once __DIR__.'/../../modelo/datosPaypal.php';
require_once __DIR__.'/../../modelo/Usuarios.php';
/**
*@param:partner_merchant_id: es el ID de comerciante de su cuenta PayPal.
*Para encontrar el ID de comerciante de su cuenta PayPal, inicie
*sesión en su cuenta PayPal enpaypal.com, haga clic en el icono
*Configuración , haga clic en Información comercial y busque
*la ID de comerciante de PayPal . Para encontrar el ID de comerciante
*de su cuenta de sandbox, siga las mismas instrucciones en sandbox.paypal.com.
**/
/*
*/
class C_O_Paypal{
  const URL_RETORNO_PAYPAL="/controlador/InputControladores/C_Paypal.php";
  public $action_url;
  protected $configuracion;
  private $datosPaypal;
  private $partner_merchant_id='';//actualmente SANDBOX(cambiar a live con cuenta real)
  private $access_token;
  public $merchantVendor=null;
  public $cuenta_paypal;

  public $accion;


  function __construct(){

    $this->configuracion= new Configuracion();
    $this->datosPaypal=new DatosPaypal();
    $this->partner_merchant_id=$_ENV['PARTNER_MERCHANT_ID'];
    $this->accion=null;
  }


  function getUrlRetorno(){
    $url_sitio=$this->configuracion->getConfiguracion("url_sitio");
    $url_completa=$url_sitio->valor.self::URL_RETORNO_PAYPAL;
    return $url_completa;
  }



  function generarLinks($token){
          //url de retorno obtenida de bbdd, // IDEA: (cambiar a una forma mas segura)
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL,$_ENV['URL_ACCESS_TOKEN'].'/v2/customer/partner-referrals');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
          curl_setopt($ch, CURLOPT_POST, 1);
          curl_setopt($ch, CURLOPT_POSTFIELDS,'{
                      "tracking_id": "<Tracking-ID>",
                      "partner_config_override": {
                        "partner_logo_url": "https://www.paypalobjects.com/webstatic/mktg/logo/pp_cc_mark_111x69.jpg",
                        "return_url": "'.$this->getUrlRetorno().'",
                        "return_url_description": "url de retorno cuando el usuario ya este registrado.",
                        "action_renewal_url": "https://testenterprises.com/renew-exprired-url",
                        "show_add_credit_card": true
                      },
                      "operations": [
                        {
                          "operation": "API_INTEGRATION",
                          "api_integration_preference": {
                            "rest_api_integration": {
                              "integration_method": "PAYPAL",
                              "integration_type": "THIRD_PARTY",
                              "third_party_details": {
                                "features": [
                                  "PAYMENT",
                                  "REFUND"
                               ]
                              }
                            }
                          }
                        }
                      ],

                      "products": [
                        "EXPRESS_CHECKOUT"
                      ],
                      "legal_consents": [
                        {
                          "type": "SHARE_DATA_CONSENT",
                          "granted": true
                        }
                      ]
                  }');
          $headers = array();
          $headers[] = 'Content-Type: application/json';
          $headers[] = 'Authorization: Bearer '.$token;
          curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
          $result = curl_exec($ch);
          if (curl_errno($ch)) {
              echo 'Error:' . curl_error($ch);
          }
          curl_close($ch);

          return json_decode($result);
  }

  private function consultarEstadoDeVendedor($partner_merchant_id,$seller_merchant_id,$access_token){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL,$_ENV['URL_ACCESS_TOKEN'].'/v1/customer/partners/'.$partner_merchant_id.'/merchant-integrations/'.$seller_merchant_id.'');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$access_token;
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        return json_decode($result);
  }

  public function consultarDatosReferencia($url_consulta,$access_token){
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url_consulta);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$access_token;
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        if (curl_errno($ch)) {
          echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        return json_decode($result);
  }

  public function setTipoDeAccion($accion){
    $this->accion=$accion;
  }
  public function getTipoDeAccion(){
    return $this->accion;
  }


  public function extraerLinkDeRegistro($result){
    return filter_var($result->links[1]->href,FILTER_SANITIZE_URL);
  }

    public function extraerUrlDeReferenciasYGuardar($result){
      filter_var($result->links[0]->href,FILTER_SANITIZE_URL);
    }
  public function __initMain(){


    $object=$this->datosPaypal->getTokenDeAcceso();
    $this->access_token=$object->access_token;

    if (($rs=$this->datosPaypal->getDatosPaypal(Usuarios::getIdUsuario()))==false) {//si no hay datos guardados en bbdd,( user no autenticado en paypal)
      $result=$this->generarLinks($this->access_token);
      if($result->links!=null){//si es distinto de null, tengo acceso
        $this->action_url=$this->extraerLinkDeRegistro($result);
        $this->setTipoDeAccion('get_partner');
      }else{//si es null no tengo acceso y por tanto hay que recoger la cuenta paypal
        $this->action_url=false;
        $this->cuenta_paypal=false;
        $this->permisoDePaypal = false;
        $this->setTipoDeAccion('get_account');
      }

    }else{
        $datos=json_decode($rs['datos_paypal']);
        switch ($datos->tipo_registro) {
          case DatosPaypal::PAYPAL_PARTNER:
                    $result=$this->consultarEstadoDeVendedor($this->partner_merchant_id,$datos->merchantIdInPayPal,$this->access_token);
                    $this->merchantVendor=$datos->merchantIdInPayPal;
                    $this->action_url=null;
                    $this->setTipoDeAccion('show_partner');
            break;

          case DatosPaypal::PAYPAL_ACCOUNT:
                $this->cuenta_paypal=$datos->cuenta_paypal;
                $this->merchantVendor=null;
                $this->action_url=false;
                $this->setTipoDeAccion('show_account');

            break;
        }

    }





  }


}
$c_Paypal=new C_O_Paypal();
$c_Paypal->__initMain();

//echo $c_Paypal->getUrlRetorno();
 ?>
